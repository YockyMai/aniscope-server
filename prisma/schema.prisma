generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USER MODELS
enum Role {
  USER
  DEVELOPER
  MODERATOR
  ADMIN

  @@map("role")
}

model User {
  id       Int           @id @default(autoincrement())
  name     String
  email    String        @unique
  password String
  banner   String?
  avatar   String?
  birthday DateTime?
  login    String?       @unique
  role     Role          @default(USER)
  reviews  AnimeReview[]

  @@map("user")
}

// ANIME MODELS
enum Format {
  TV
  TV_SHORT
  MOVIE
  SPECIAL
  OVA
  ONA
  MUSIC
  MANGA
  NOVEL
  ONE_SHOT

  @@map("format")
}

enum Source {
  ORIGINAL
  MANGA
  LIGHT_NOVEL
  VISUAL_NOVEL
  VIDEO_GAME
  OTHER
  NOVEL
  DOUJINSHI
  ANIME
  WEB_NOVEL
  LIVE_ACTION
  GAME
  COMIC
  MULTIMEDIA_PROJECT
  PICTURE_BOOK
}

enum Status {
  FINISHED
  RELEASING
  NOT_YET_RELEASED
  CANCELLED
  HIATUS

  @@map("status")
}

enum Season {
  SUMMER
  WINTER
  SPRING
  FALL

  @@map("season")
}

enum VideoType {
  TRAILER
  OPENING
  ENDING
  OTHER

  @@map("video_type")
}

model Anime {
  id                Int           @id @default(autoincrement())
  idShikimori       Int?          @unique @map("id_shikimori")
  idMyAnimeList     Int?          @unique @map("id_mal")
  idAnilist         Int           @unique @map("id_al")
  link              String        @unique
  title             String?
  titleRu           String?       @map("title_ru")
  titleJapan        String?       @map("title_japan")
  otherTitles       String[]      @map("other_titles")
  synonyms          String[]
  poster            String?
  banner            String?
  ratingMpa         String?       @map("rating_mpa")
  minimalAge        Int?          @map("minimal_age")
  format            Format?
  status            Status?
  season            Season?
  source            Source?
  score             Int?
  scoreAnilist      Int?          @map("score_anilist")
  scoreShikimori    Int?          @map("rating_shikimori")
  popularityAnilist Int?          @map("popularity_anilist")
  description       String?
  descriptionRu     String?       @map("description_ru")
  isLicensed        Boolean?      @default(false) @map("is_licensed")
  color             String?       @db.VarChar(8)
  studios           AnimeStudio[]
  genres            AnimeGenre[]
  reviews           AnimeReview[]
  release           DateTime?
  episodes          Episode[]
  videos            AnimeVideo[]
  tags              AnimeTag[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("anime")
}

model Studio {
  id    Int           @id @default(autoincrement())
  name  String
  anime AnimeStudio[]

  @@map("studio")
}

model AnimeStudio {
  animeId  Int
  studioId Int

  anime  Anime  @relation(fields: [animeId], references: [id])
  studio Studio @relation(fields: [studioId], references: [id])

  @@id([animeId, studioId])
  @@map("anime_studio")
}

model Genre {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  image      String
  AnimeGenre AnimeGenre[]

  @@map("genre")
}

model AnimeGenre {
  animeId Int
  genreId Int

  anime Anime @relation(fields: [animeId], references: [id])
  genre Genre @relation(fields: [genreId], references: [id])

  @@id([animeId, genreId])
  @@map("anime_genre")
}

model AnimeReview {
  id       Int     @id @default(autoincrement())
  score    Int
  comment  String?
  verified Boolean @default(false)

  user    User   @relation(fields: [userId], references: [id])
  userId  Int
  anime   Anime? @relation(fields: [animeId], references: [id])
  animeId Int?

  @@map("anime_review")
}

model Episode {
  id           Int                  @id @default(autoincrement())
  name         String?
  description  String?
  image        String?
  translations EpisodeTranslation[]
  anime        Anime?               @relation(fields: [animeId], references: [id])
  animeId      Int?

  @@map("episode")
}

model Translation {
  id     Int    @id @default(autoincrement())
  studio String

  episodeTranslation EpisodeTranslation[]

  @@map("translation")
}

model EpisodeTranslation {
  episodeId     Int
  translationId Int

  episode     Episode     @relation(fields: [episodeId], references: [id])
  translation Translation @relation(fields: [translationId], references: [id])

  @@id([episodeId, translationId])
  @@map("episode_translation")
}

model AnimeVideo {
  id    Int       @id @default(autoincrement())
  type  VideoType @default(OTHER)
  image String
  name  String
  url   String

  anime   Anime? @relation(fields: [animeId], references: [id])
  animeId Int?

  @@map("anime_video")
}

model AnimeTag {
  tagId   Int
  animeId Int

  tag   Tag   @relation(fields: [tagId], references: [id])
  anime Anime @relation(fields: [animeId], references: [id])

  @@id([tagId, animeId])
  @@map("anime_tag")
}

model Tag {
  id               Int        @id @default(autoincrement())
  name             String
  description      String?
  category         String?
  rank             Int?
  isGeneralSpoiler Boolean?   @map("is_general_spoiler")
  isMediaSpoiler   Boolean?   @map("is_media_spoiler")
  isAdult          Boolean?   @map("is_adult")
  animeTag         AnimeTag[]

  @@map("tag")
}
